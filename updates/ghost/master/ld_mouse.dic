//---------------------------Mouse Functions--------------------------

//dont touch - determines who the mouse is over
OnMouseMove
 {
		//---- reference3 determines the character in question
		if reference3 == 0 //if the character is 0, aka the main character
		{
			//---- it will run the mouse functions for that character
			MouseMoveSakura
		}
		else //if the character isn't 0, then it must be the side character.
		{
			//---- this will run the mouse functions for the side character.
			MouseMoveKero
		}
 }
 

 //--MouseMoveSakura
 //The petting function for your main character. Remember how it was referred to as sakura in some of the descript.txt and install.txt files?
 
MouseMoveSakura
 {
	if reference4 != "" //ignore
 	{
 		stroke++ //if you move the mouse over the right areas, the stroke count will go up.
 		if stroke >= 40 //if the stroke count is above a certain number, the petting dialogue will kick in. You can change this number to make the petting take longer or shorter if you want. FLELEs have it set to 50 for some reason, which makes it take longer than this.
		{
 			stroke = 0 //resetting the stroke count
			if reference4 == "Head" //do you remember the names of the areas you set up for your collisions in surfaces.txt? This is where they come into play! This is where you'd put in the name of your collision, such as head, face, horns, tail, ears, whatever. As mentioned in surfaces.txt, you can add as many collisions to a pose as you want, as long as you make sure to add them all in here so they can actually be used.
 			{
				"\0\s[7]Ah, that tickles~\e"
				"\0\s[7]Hehe, getting friendly, huh?\e"
				"\0\s[7]Just don't mess up my hair, ok?\e"
				"\0\s[7]The hairspray doesn't make my hair too hard, does it?\e"
 			}
 			/*elseif reference4 == "Face" //Another area set up by the collisions in surfaces.txt. You can expand this list with as many elseifs as you need depending on how many collisions you've set up.
 			{
 				"\0\s[0]This is petting dialogue for my face.\e"
 				"\0\s[0]This is more petting dialogue for my face.\e"
 				"\0\s[0]This is another bit of petting dialogue for my face. Well, stroking would probably be more accurate.\e"
				//Replace with appropriate dialogue as needed.
 			}*/
			
 		}
	}
 	else
	{
 		// If the mouse isn't over the ghost, it'll zero out the stroke value.
		stroke = 0
 	}
}

 //---- MouseMoveKero -----------------------------------------------------------------
 //MouseMoveKero is exactly like the above, except set up for your second character. 
 
MouseMoveKero
 {
	if reference4 != ""
 	{
 		stroke++
 		if stroke >= 40
		{
			stroke = 0
			if reference4 == "Head" //Put in the name of your collision area you set up for your secondary character here.
 			{
				"\1\s[18]Careful there!\e"
				"\1\s[19]Ah, a headpat?\e"
				"\1\s[19]Don't ruin my hair, ok?\e"
				//Replace this dialogue with your secondary character's dialogue.
 			}
 		}
	}
 	else
	{
 		// If the mouse isn't over the ghost, it'll zero out the stroke value.
		stroke = 0
 	}
}

//---- OnMouseDoubleClick -------------------------------------------------------
//This is set up much like OnMouseMove above, except this is checking to see if the user is double clicking on the ghost. You also don't need to touch any of this. 
//Advanced users adding a third character, the same principles from OnMouseMove apply here as well! Make sure to add an elseif with the right number for your third character.

OnMouseDoubleClick
 {
	//---- like with the OnMouseMove function above, this determines who the user is clicking on.
	if reference5 == 0 //checks which button is being used for the click
	{
	 	if reference3 == 0 //if the character is 0, aka your main character
		{
		MouseDoubleClickSakura
		}
		else
		{
 		MouseDoubleClickKero
		}
	}
 }

 //---- MouseDoubleClickSakura ----------------------------------------------------------
 //Like the petting animation above, this is the reactions they have to being double clicked. These also rely on the collisions you set up in surfaces.txt! This set is specifically for the main character, as indicated by the Sakura in the name again.
 
 //*********************Advanced User Info*******************************
 //As a note, double clicking on a certain area of your ghost doesn't have to be the user hitting them. You could instead set up a collision for a piece of clothing, and then have the character talk about that bit of clothing when it's double clicked, for example. One of Smoker's double clicks gives her a high-five when she's in a certain pose. Maybe double clicking is patting them, or pointing behind them, or tapping them, or any number of things. You can be creative here with how they respond depending on what areas you've set up as collisions!
 
 //If you don't want your character to be hittable at all, you can just delete everything in MouseDoubleClickSakura except OpenSakuraMenu. So it'd look like
 
 //MouseDoubleClickSakura
 //{
 //OpenSakuraMenu
 //}
 
 //That's all there is to it. This method also applies to the secondary character, Kero, below this set.
 //***********************************************************************
 
MouseDoubleClickSakura
 {
 	if reference4 == "Head" || reference4 == "Face" //here, this is checking to see if the user is double clicking on either the character's head OR their face, which for our purposes means they're hitting the ghost. More about operators at the walkthrough.
	{
		"\0\s[0]This is the hitting dialogue.\w8\1\s[15]lol\w8\0\s[9]\n\n[half]Shut up.\e"
		"\0\s[0]This is another hitting dialogue.\e"
		"\0\s[0]This is yet another bit of text for hitting.\e"
		"\0\s[0]This is the fourth hitting dialogue.\e"
		//Replace this dialogue with appropriate dialogue as you need. You can add more or cut it down if you want, even down to nothing if you want no response from your ghost at all when those areas are double clicked.
 	}
	else
 	{
		//Otherwise, if the user doubleclicks somewhere else on the character, they will open their menu as detailed in menu.dic.
 		OpenSakuraMenu
	}
 }

 
 //---- MouseDoubleClickKero -----------------------------------------------------------
 //This is just the same as MouseDoubleClickSakura above, except for your secondary character. The same principles apply, including how to make your character unhittable.
 
 
MouseDoubleClickKero
 {
 	if reference4 == "Face" //Triangle doesn't have a separate head really, being a triangle, so this only happens if you doubleclick his face.
	{
		"\1\s[10]This is hitting dialogue.\w8\0\s[5]ha ha\w8\1\s[19]\n\n[half]Quiet.\e"
		"\1\s[10]This is another hit dialogue.\e"
		"\1\s[10]This is yet another hit dialogue.\e"
		"\1\s[10]This is the fourth hitting dialogue.\e"
		//Replace the dialogue here for the second character with whatever you want. What I said above about adding or trimming still holds here.
 	}
	else //Otherwise if you click anywhere else on Triangle's body
 	{
		OpenKeroMenu //This will open his menu set up in menu.dic.
	}
 }

 //*********************Advanced User Info*******************************
 //There are other mouse related functions you could set up much like the above, such as OnMouseDragStart, OnMouseDragEnd, OnMouseWheel, and others which correspond to various things you can do with your mouse. You can probably guess what those functions do just by their names - OnMouseWheel would be if someone spun their mouse wheel over a certain area, for example. If you're interested in these, I'd recommend doing some reading at the CROW-SSP Encyclopedia to get a better idea of them and settle down for some trial and error learning as you try to put them in.
 //***********************************************************************